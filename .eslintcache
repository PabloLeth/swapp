[{"/home/pablo/Documentos/swapp/src/index.js":"1","/home/pablo/Documentos/swapp/src/App.js":"2","/home/pablo/Documentos/swapp/src/components/Navbar.js":"3","/home/pablo/Documentos/swapp/src/pages/Index.js":"4","/home/pablo/Documentos/swapp/src/pages/Profile.js":"5","/home/pablo/Documentos/swapp/src/components/Login.js":"6","/home/pablo/Documentos/swapp/src/components/Rota.js":"7","/home/pablo/Documentos/swapp/src/components/RotaMaker.js":"8","/home/pablo/Documentos/swapp/src/pages/Manager.js":"9","/home/pablo/Documentos/swapp/src/components/SearchShifts.js":"10","/home/pablo/Documentos/swapp/src/pages/LoginPage.js":"11","/home/pablo/Documentos/swapp/src/context/GlobalContext.js":"12","/home/pablo/Documentos/swapp/src/context/auth.js":"13","/home/pablo/Documentos/swapp/src/PrivateRoute.js":"14","/home/pablo/Documentos/swapp/src/pages/Pool.js":"15","/home/pablo/Documentos/swapp/src/components/ShiftList.js":"16","/home/pablo/Documentos/swapp/src/components/BodyRota.js":"17","/home/pablo/Documentos/swapp/src/components/Weekshifts.js":"18","/home/pablo/Documentos/swapp/src/components/Footer.js":"19"},{"size":264,"mtime":1617047522664,"results":"20","hashOfConfig":"21"},{"size":1938,"mtime":1617749881031,"results":"22","hashOfConfig":"21"},{"size":1669,"mtime":1617749327157,"results":"23","hashOfConfig":"21"},{"size":1126,"mtime":1617704251711,"results":"24","hashOfConfig":"21"},{"size":268,"mtime":1617749806687,"results":"25","hashOfConfig":"21"},{"size":2365,"mtime":1617780848062,"results":"26","hashOfConfig":"21"},{"size":4353,"mtime":1617749206790,"results":"27","hashOfConfig":"21"},{"size":6194,"mtime":1617749160893,"results":"28","hashOfConfig":"21"},{"size":215,"mtime":1617749913771,"results":"29","hashOfConfig":"21"},{"size":866,"mtime":1617749052295,"results":"30","hashOfConfig":"21"},{"size":211,"mtime":1615127036307,"results":"31","hashOfConfig":"21"},{"size":88,"mtime":1615134637381,"results":"32","hashOfConfig":"21"},{"size":166,"mtime":1615205870573,"results":"33","hashOfConfig":"21"},{"size":406,"mtime":1615287503409,"results":"34","hashOfConfig":"21"},{"size":1836,"mtime":1617749785738,"results":"35","hashOfConfig":"21"},{"size":2581,"mtime":1617745437425,"results":"36","hashOfConfig":"21"},{"size":3242,"mtime":1617749512656,"results":"37","hashOfConfig":"21"},{"size":9131,"mtime":1617749000399,"results":"38","hashOfConfig":"21"},{"size":380,"mtime":1617562728811,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1nxl4n5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/pablo/Documentos/swapp/src/index.js",[],["91","92"],"/home/pablo/Documentos/swapp/src/App.js",["93","94"],"import React, { useState } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport {AuthContext} from './context/auth';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Index from './pages/Index';\nimport jwt_decode from \"jwt-decode\";\nimport Profile from './pages/Profile';\nimport Rota from \"./components/Rota\";\nimport Manager from './pages/Manager';\nimport Pool from './pages/Pool';\nimport LoginPage from './pages/LoginPage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const tokenStored = localStorage.getItem(\"token\");\n\n   const [authTokens, setAuthTokens] = useState(tokenStored);\n   const setTokens = (data) =>{\n     localStorage.setItem(\"token\", data);\n     setAuthTokens(data);\n   }\n   const boss = () => {\n    if (tokenStored){\n\n        const userLogged = jwt_decode(tokenStored);\n        const boss = userLogged.roles.find(rol => rol == \"ROLE_MANAGER\");\n      \n        if (boss) return true;\n}}\nconst logged = () => {\n    if (tokenStored){\n\n        const userLogged = jwt_decode(tokenStored);\n        const user = userLogged.roles.find(rol => rol == \"ROLE_USER\");\n        if (user) return true;\n}}\n\n\nconst logout = ()=> {\n    localStorage.removeItem(\"token\");\n    setAuthTokens(\"\");\n}\n\n     return (\n      <>\n    <AuthContext.Provider value={{authTokens, setAuthTokens: setTokens}}>\n    <BrowserRouter>\n        {(logged())? <Navbar boss={boss} logged={logged} logout={logout}/> : \"\"}\n      <div className = \"min-view\">\n\n        <Route exact path=\"/\" component={Index} />\n        <Route  path=\"/Pool\" component={Pool} />\n        <Route  path=\"/profile\" component={Profile} />\n        <Route  path=\"/profile/rota\" component={Rota} />\n        <PrivateRoute  path=\"/manager\" component={Manager} /> \n        <Route  path=\"/login\" component={LoginPage} />\n   \n       \n      </div>\n    </BrowserRouter>\n     </AuthContext.Provider>\n\n      </>\n    );\n  }\n\nexport default App;\n","/home/pablo/Documentos/swapp/src/components/Navbar.js",["95"],"import { NavLink, Link } from 'react-router-dom'\nimport jwt_decode from \"jwt-decode\";\nfunction Navbar({boss, logged, logout}) {\n    const userLogged = jwt_decode(localStorage.getItem(\"token\"));\n\n    return (\n        <>\n        {console.log(userLogged)}\n        <nav className=\"\">\n                <div className=\"\">\n                    <ul className=\"navbar-nav bd-navbar-nav flex-row bg-dark align-items-center  \">\n                                    \n                        {(logged())? <li className=\"nav-item\"><NavLink to=\"/\"> <h1 className=\"logo\"></h1></NavLink></li>: \"\"}\n                        {(boss())  ? <li className=\"nav-item m-3\"><NavLink to=\"/manager\">Manager</NavLink></li> : \"\"} \n                        {(logged())? <li className=\"nav-item m-3\"><NavLink to=\"/profile\">User Profile</NavLink></li> : \"\"}\n                        {(logged())? <li className=\"nav-item m-3\"><NavLink className=\"\"  to=\"/Pool\"><i className=\"fas fa-search\"></i>Search Shifts</NavLink></li>: \"\"}\n                       \n                        <div className=\"nav-user-picture ml-auto\"></div>\n                        <div className=\" nav-user\">\n                       \t{(logged())? <li className=\"nav-item m-3\"><h6>{userLogged.username}</h6></li>:\"\"}\n                        </div>\n                        <div className=\"\">\n                        {(logged())? \"\" : <li className=\"nav-item m-3\"><NavLink to=\"/login\">Login</NavLink></li>}\n                        {(logged())? <li className=\"nav-item m-3\"><Link onClick={()=>logout()} to= \"/\">Logut</Link></li> : \"\"}</div>\n\n                    </ul>\n                </div>\n        </nav>\n    </>\n    );\n}\n\nexport default Navbar;\n","/home/pablo/Documentos/swapp/src/pages/Index.js",[],"/home/pablo/Documentos/swapp/src/pages/Profile.js",["96"],"import Rota from '../components/Rota'\nimport { useRouteMatch } from 'react-router-dom'\nimport './profile.css';\n\nfunction Profile() {\n const { url } = useRouteMatch();\n    return (\n      <>\n      <Rota />\n    \n      \n      </>\n    );\n  }\n  \n  export default Profile;\n  ","/home/pablo/Documentos/swapp/src/components/Login.js",["97","98"],"/home/pablo/Documentos/swapp/src/components/Rota.js",["99","100","101","102","103","104","105","106"],"import { useState, useEffect } from 'react';\nimport BodyRota from './BodyRota';\nimport Footer from '../components/Footer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faArrowRight  } from '@fortawesome/free-solid-svg-icons';\n\nfunction Rota() {\n    const arrowL =  <FontAwesomeIcon icon={faArrowLeft} />\n    const arrowR =  <FontAwesomeIcon icon={faArrowRight} />\n    const dayName = [\"#\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\n    const mes = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const [data, setData] = useState([]);\n    const [check, setCheck] = useState([false]);\n    const todayWeek = [];\n    const today = new Date;\n    for (let i = 1; i <= 7; i++) {\n        let first = today.getDate() - today.getDay() + i;\n        let day = new Date(today.setDate(first));\n        todayWeek.push(day);\n    }\n    const [week, setWeek] = useState(todayWeek);\n\n    \n    let token = localStorage.getItem(\"token\");\n    const URLSHIFT = \"http://localhost:8000/shift/rotauser\";\n    \n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type' : 'application/json',\n                 Authorization : `Bearer ${token}`\n        },\n      body: JSON.stringify({dateFromjsn : week[0].toISOString().slice(0, 10), dateTojsn : week[6].toISOString().slice(0, 10)})\n     \n    };\n  \n    function handlenext() {\n        nextWeek();\n    }\n    function handleprev() {\n        prevWeek();\n    }\n    function nextWeek() {\n        const weekResult = [];\n        week.map(date => {\n\n            let result = new Date(date);\n            result.setDate(result.getDate() + 7);\n            weekResult.push(result);\n\n        })\n\n        return setWeek(weekResult);\n    }\n    function prevWeek() {\n        const weekResult = [];\n        week.map(date => {\n            let result = new Date(date);\n            result.setDate(result.getDate() - 7);\n            weekResult.push(result);\n        })\n        return setWeek(weekResult);\n    }\n    const rotaFetch = () =>{\n        fetch(URLSHIFT,reqOpt)\n        .then(response => {\n            if (response.ok){\n                response.json()\n                .then(data => {setData(data);})\n            }\n            if(response.status==401){\n                alert(\"Wopa! no estas logueado o no tienes permisos para acceder\");\n               \n            }\n        })\n           \n        .catch(error => {\n         console.log(\"ha habido un error:\", error)\n        }); \n    }\n    useEffect(() => {\n        rotaFetch();\n    \n\n    }, [week, check ]);\n  \n\n    return (\n        <>\n          <div className=\"row align-items-center bg-dates py-4\">\n            <div  className=\" col d-flex justify-content-center\">\n               <a href=\"#\" onClick={()=>{handleprev()}}>{arrowL} Prev. week</a>\n            </div>\n            <div className=\"text-center col-8\" >\n                <h1>{week[0].getFullYear()}</h1>\n                <h3>Week from {week[0].getDate()} of {month[week[0].getMonth()]} to {week[6].getDate()} of {month[week[6].getMonth()]}</h3>\n            </div>\n            <div  className=\"col d-flex justify-content-center\">\n           \n            <a href=\"#\" onClick={()=>{handlenext()}}> Next week {arrowR}</a>\n            </div>\n        </div>\n\n        <div id=\"content-wrap\">\n            <table className=\"table table-responsive-sm table-responsive-md text-center mb-4\">\n                <thead className=\"table-dark\">\n                    <tr>\n                        {dayName.map(value => {return <th scope=\"col\">{value}</th>})}\n                    </tr>\n                    <tr>\n                        <th className=\"th-rad\" scope=\"col\"></th>\n                        {week.map(day => { return <th colspan=\"1\" scope=\"col\">{(\"0\" + day.getDate()).slice(-2)} - {(\"0\" + (day.getMonth() + 1)).slice(-2)}</th> })}\n\n                    </tr>\n                </thead>\n                <tbody>\n                    <BodyRota  data={data} week={week} setCheck ={setCheck} check={check} />\n\n                </tbody>\n            </table>\n        </div>\n        \n            <Footer />\n        </>\n    )\n}\n\nexport default Rota;","/home/pablo/Documentos/swapp/src/components/RotaMaker.js",["107","108","109","110","111","112","113"],"import { useState, useEffect } from \"react\";\nimport Weekshifts from './Weekshifts';\nimport Footer from '../components/Footer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faArrowRight  } from '@fortawesome/free-solid-svg-icons';\nimport swal from 'sweetalert';\nfunction RotaMaker() {\n  const arrowL =  <FontAwesomeIcon icon={faArrowLeft} />\n  const arrowR =  <FontAwesomeIcon icon={faArrowRight} />\n    const dayName = [\"#\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\n    const shfitType = [\"1\", \"2\"]; /* necesito cambiarlo por 2 y 1 para el back? */\n    // const month = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\",\"Mayo\",\"Junio\",\"Julio\",\"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"];\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    const today = new Date;\n    let token = localStorage.getItem(\"token\");\n    const todayWeek = [];\n    \n    for (let i = 1; i <= 7; i++) {\n      let first = today.getDate() - today.getDay() + i ;\n      let day = new Date(today.setDate(first));\n      todayWeek.push(day);\n    }\n  \n    const[shifts, setShifts] = useState([null]);\n\n   const [week, setWeek] = useState(todayWeek);\n\n   function getDataWeek(){\n    const URLROTA = \"http://localhost:8000/shift/manager/rotacheck\";\n  \n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type' : 'application/json',\n                 Authorization : `Bearer ${token}`\n                },\n      body: JSON.stringify({dateFromjsn :(week[0].toISOString().slice(0, 10)), dateTojsn: (week[6].toISOString().slice(0, 10)) })\n     \n    };\n  \n     \n      fetch(URLROTA,reqOpt)\n      .then(response =>{ \n        if (response.status === 401){\n          alert(\"epaaa no estas logueado tira patras!\")\n        }else{\n\n          response.json()\n          .then(data => {\n          \n             setShifts(data);\n             \n           \n          }\n    \n          ).catch(error => {\n           console.log(\"ha habido un error:\", error)\n          });\n        }\n      })\n    } \nuseEffect(() => {\n  getDataWeek();\n \n \n}, [week]);\n\n   function handlenext(){\n    nextWeek();\n    \n   }\n   function handleprev(){\n    prevWeek();\n    \n   }\n   function nextWeek() {\n    const weekResult = [];\n    week.map(date=>{\n       \n        let result = new Date(date);\n        result.setDate(result.getDate() + 7);\n        weekResult.push(result);\n\n    })\n    setShifts([null])\n    return setWeek(weekResult);\n  }\n  function prevWeek() {\n    const weekResult = [];\n    week.map(date =>{\n       let result = new Date(date);\n        result.setDate(result.getDate() - 7);\n        weekResult.push(result);\n    });\n    setShifts([null]);\n    return setWeek(weekResult);\n  }\n\n \n  const sendFetch = () => {\n    const URLADD = \"http://localhost:8000/shift/manager/new\";\n  \n    const reqOpt = {\n      method: 'POST',\n      headers: { 'Content-Type' : 'application/json',\n                 Authorization : `Bearer ${token}`\n                },\n      body: JSON.stringify(shifts)\n     \n    };\n  \n     \n      fetch(URLADD,reqOpt)\n      .then(response =>{ \n        if (response.status === 401){\n          alert(\"Ups! It seems you are not logged in\")\n        }else{\n\n          response.json()\n          .then(data => {\n          swal(data.message, {icon: \"success\",})\n           console.log(data);\n           getDataWeek() ;\n           \n          }\n    \n          ).catch(error => {\n           console.log(\"ha habido un error:\", error)\n          });\n        }\n      })\n  }\n\n  const sendToDb = () =>{\n    swal({\n      title: \"Are you sure you want to commit?\",\n      text: \"Just making sure this is the right rota\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n    .then((willSend) => {\n      if (willSend) {\n          \n          sendFetch();\n        \n      } else {\n        swal(\" No worries, keep working this hard and commit it when ready\");\n      }\n    });\n  \n  }\n  \n  \n\n    return (\n        <>\n     <div className=\"row align-items-center bg-dates py-4\">\n            <div  className=\" col d-flex justify-content-center\">\n               <a href=\"#\" onClick={()=>{handleprev()}}>{arrowL} Prev. week</a>\n            </div>\n            <div className=\"text-center col-8\" >\n                <h1>{week[0].getFullYear()}</h1>\n                <h3>Week from {week[0].getDate()} of {month[week[0].getMonth()]} to {week[6].getDate()} of {month[week[6].getMonth()]}</h3>\n            </div>\n            <div  className=\"col d-flex justify-content-center\">\n           \n            <a href=\"#\" onClick={()=>{handlenext()}}> Next week {arrowR}</a>\n            </div>\n        </div>\n       \n            <div id=\"content-wrap\">\n                <table id=\"table-rota\" className=\"table table-sm text-center mb-2\">\n            \n                    <thead className=\"table-dark \">\n                    <tr>\n                        {dayName.map(value => {return <th scope=\"col\">{value}</th>})}\n                    </tr>\n                    <tr>\n                        <th className=\"th-rad\" scope=\"col\"></th>\n                        {week.map(day =>\n                           { return <th colspan=\"1\" scope=\"col\">{(\"0\" + day.getDate()).slice(-2)} - {(\"0\" + (day.getMonth() + 1)).slice(-2)}</th> }\n                        )}\n\n                    </tr>\n                    </thead>\n                    <tbody className=\"\">\n                       \n                       {\n                       shifts.map(worker =>\n                     <Weekshifts worker= {worker} week= {week} setShifts = {setShifts} shifts = {shifts}/>\n                      ) }\n                    </tbody>\n                    <tfoot className=\"text-center\">\n                      <tr>\n                        <td colspan=\"8\" className=\"table-dark\">\n\n                      <button  className=\"btn btn-success\" onClick={()=>{sendToDb()}}>Enviar a DB</button>\n                        </td>\n                    \n                      </tr>\n                    </tfoot>\n                </table>\n            </div>\n           \n            <Footer />\n  \n    \n        </>\n    )\n}\n\nexport default RotaMaker;","/home/pablo/Documentos/swapp/src/pages/Manager.js",[],"/home/pablo/Documentos/swapp/src/components/SearchShifts.js",["114"],"import { useState, useEffect } from 'react';\n\nfunction SearchShifts({ setFilteredData, data, filteredData }) {\n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setSearch(\"\");\n  }\n  useEffect(() => {\n    const results = data.filter(data =>\n      data.branch.toLowerCase().includes(search)\n    );\n    setFilteredData(results);\n  }, [search]);\n\n \n  return (\n    <>\n\n      <div className=\"container\">\n\n        <form onSubmit={handleSubmit}>\n\n          <input type=\"text\"\n            className=\"form-control col-4 my-2 mt-4\"\n            placeholder=\"Branch...\"\n            value={search} onChange={(e) => { setSearch(e.target.value) }} />\n          <input className=\"my-2 btn btn-info\" type=\"submit\" value=\"Search\" />\n         \n        </form>\n       \n      </div>    \n\n    </>\n  );\n}\n\nexport default SearchShifts;","/home/pablo/Documentos/swapp/src/pages/LoginPage.js",["115"],"import './loginpage.css';\nimport Login from '../components/Login';\nimport {useState} from 'react'\n\nfunction LoginPage() {\n    return (\n      <>\n     <Login  />\n      </>\n    );\n  }\n  \n  export default LoginPage;","/home/pablo/Documentos/swapp/src/context/GlobalContext.js",[],["116","117"],"/home/pablo/Documentos/swapp/src/context/auth.js",[],"/home/pablo/Documentos/swapp/src/PrivateRoute.js",[],"/home/pablo/Documentos/swapp/src/pages/Pool.js",["118","119","120","121"],"import ShiftList from '../components/ShiftList';\nimport SearchShifts from '../components/SearchShifts';\nimport { useEffect, useState } from 'react';\nimport './pool.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFrownOpen } from '@fortawesome/free-solid-svg-icons';\nimport Footer from '../components/Footer';\n\nfunction Pool() {\n  const sad =  <FontAwesomeIcon icon={faFrownOpen} />\n  let token = localStorage.getItem(\"token\");\n  const [{ data, error, isLoading }, dispatch] = useState({\n    data: null,\n    error: null,\n    isLoading: true\n  });\n  const [filteredData, setFilteredData]=useState(data);\n\n\n  const URLPOOL = \"http://localhost:8000/shift/pool\";\n  const poolFetch = ()=>{\n    fetch(URLPOOL, {headers: { Authorization : `Bearer ${token}`}, })\n\n    .then(response => response.json())\n    .then(data => {dispatch({ data, error: null, isLoading: false })\n\n      console.log(data);\n     }\n\n    ).catch(error => {\n      dispatch({ data: null, error, isLoading: false })\n      console.log(\"ha habido un error:\", error)\n    });\n  }\n  useEffect(() => {\n   \n    poolFetch();\n\n  }, []);\n\n \n  return (\n    <>\n\n      <div className=\"container\">\n      \n        {isLoading ? \n        <ShiftList data={filteredData}/> : \n        <SearchShifts setFilteredData = {setFilteredData} data = {data} filteredData = { filteredData}/> \n        }\n       \n       \n        <div className={` container card-deck ${ filteredData ? filteredData.length==0?  \"\":\"pool-back\":\"\"}`}>\n          <div className=\" d-flex \">\n           { filteredData ? \n           filteredData.length==0 ?  <h3>No results to show {sad} </h3> : <ShiftList data={filteredData} setFilteredData = {setFilteredData} />\n            :  \"\"}\n          </div>\n        </div>\n         \n      </div>\n  \n      <Footer />\n    </>\n  );\n}\n\nexport default Pool;\n","/home/pablo/Documentos/swapp/src/components/ShiftList.js",["122","123"],"import swal from 'sweetalert';\nfunction ShiftList({ data }) {\n  if (!data) {\n    return <p>loading...</p>\n  }\n  let token = localStorage.getItem(\"token\");\n  const week = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n  const URLSHIFT = \"http://localhost:8000/shift/swapping\";\n  \n  const reqOpt = {\n    method: 'PUT',\n    headers: { 'Content-Type' : 'application/json',\n               Authorization : `Bearer ${token}`\n  },\n    body: JSON.stringify({swapping : 0 })\n   \n};\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\nconst swappingFetch = (id) =>{\n  fetch(`${URLSHIFT}/${id}`,reqOpt)\n  .then(response => response.json())\n  .then(data => {\n    console.log(data.answer);\n   \n      swal(\"Boom! thats your shift now!\", {\n          icon: \"success\",\n        });\n  }\n  ).catch(error => {\n    console.log(\"ha habido un error:\", error)\n  });\n}\n const takeShift= (id) => {\n   \n    swal({\n      title: \"Are you a 100% sure?\",\n      text: \"Once you take the shift, you will have to call your boss to explain it!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n    .then((willSend) => {\n      if (willSend) {\n          \n          swappingFetch(id);\n      \n      } else {\n        swal(\"are you still looking for more work?!\");\n      }\n    });\n  }\n  return (\n    <>\n      <div className=\"row\">\n       \n\n          {\n            data.map(({ date, worker, branch, shiftType, startShift, endShift, job, id }) => {\n\n              return (\n                <div className=\"my-card\">\n                <div className=\"card my-card-size text-center mx-2 my-3 \">\n                  <div className= {`card-body ${shiftType == \"morning\" ? \" morning\": \"evening\" }`}>\n           \n                    <h3 className=\"card-text\"><b>{week[new Date(startShift.date).getDay()]}</b></h3>\n                    <p className=\"card-text\"><b>{startShift.date.slice(5, 10)}</b></p>\n\n                    <h4 className=\"card-text\">{capitalize(shiftType)}</h4>\n                    <h5 className=\"card-text\"> {branch}</h5>\n                    <p className=\"card-text\">From: <b>{startShift.date.slice(11, 16)} - {endShift.date.slice(11, 16)}</b></p>\n\n                    <p className=\"card-text\">Change with: {capitalize(worker)}</p>\n                    <a href=\"#\" className=\"p-2\"id={id} onClick={()=>takeShift(id)}>Take it!</a>\n                  </div>\n                </div>\n                </div>\n              )\n            })\n          }\n        </div>\n \n    </>\n  )\n}\nexport default ShiftList;\n\n\n","/home/pablo/Documentos/swapp/src/components/BodyRota.js",["124","125","126"],"import swal from 'sweetalert';\nfunction BodyRota({ data, week, check, setCheck }) {\n  const capitalize = (s) => {\n    if (typeof s !== 'string') return '';\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n  const shiftType = [\"morning\", \"evening\"];\n  if (!data) {\n    return <p>loading...</p>\n  }\n  if (data) {\n\n  }\n  let token = localStorage.getItem(\"token\");\n\n  const URLSHIFT = \"http://localhost:8000/shift/swapping\";\n\n  const reqOpt = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ swapping: 1 })\n\n  };\n  const swappingFetch = (id) => {\n\n    fetch(`${URLSHIFT}/${id}`, reqOpt)\n      .then(response => {\n\n        if (response.status == 403) {\n\n          response.json()\n            .then(data => { swal(data.answer, { icon: \"error\", }) })\n        }\n        if (response.ok) {\n\n          response.json()\n            .then(data => {\n              swal(data.answer, { icon: \"success\", });\n              setCheck(!check);\n            })\n\n            .catch(error => {\n\n              console.log(\"ha habido un error:\", error)\n            });\n        }\n      })\n  }\n\n  const tdcolor = (swapping, shiftType, active) => {\n\n    if (active) {\n      return swapping ? \"td-pool\" : ` td-${shiftType}`;\n    }\n    if (!active) {\n      return \"td-off align-middle\";\n    }\n\n  }\n  const shiftToPool = (e) => {\n    console.log(e.id);\n\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once you send it to the pool, you will have to call your boss and explain it to him to recover it!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n      .then((willSend) => {\n        if (willSend) {\n       \n          swappingFetch(e.id);\n\n        } else {\n          swal(\"you will work this shift then!\");\n        }\n      });\n\n\n  }\n  return (\n    <>\n      {console.log(\"infinito?\")}\n      {shiftType.map(type => {\n        return <tr className=\"\">\n          <th className=\"table-dark align-middle\">{capitalize(type)}</th>\n        \n          {week.map(day => {\n            let datestr = day.toISOString().slice(0, 10);\n\n            let theShift = data.find(shift => shift.shiftType == type && new Date((new Date(shift.date.date).getTime()) + 120 * 60 * 1000 + 1).toISOString().slice(0, 10) == datestr);\n\n            if (theShift) {\n\n              return (<td\n\n                className={tdcolor(theShift.swapping, theShift.shiftType, theShift.active)}\n                onClick={(e) => shiftToPool(e.currentTarget)}\n                id={theShift.id}\n                key={theShift.id} >\n                {theShift.active ? <> <p>{(\"0\" + (new Date(theShift.startShift.date).getHours())).slice(-2)}:{(\"0\" + (new Date(theShift.startShift.date).getMinutes())).slice(-2)} /\n                              {(\"0\" + (new Date(theShift.endShift.date).getHours())).slice(-2)}:{(\"0\" + (new Date(theShift.endShift.date).getMinutes())).slice(-2)}</p>\n                  <b>{theShift.branch}</b>\n                </>\n                  : <b>OFF</b>}\n\n              </td>)\n            }else{\n              return <td className=\"td-ns\"><b> No shift found</b> </td>\n            }\n\n          })}\n        </tr>\n\n      })}\n    </>\n  )\n}\nexport default BodyRota;","/home/pablo/Documentos/swapp/src/components/Weekshifts.js",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"import React, { useState, useContext } from 'react';\nfunction Weekshifts({ worker, week, setShifts, shifts }) {\n    if (!worker) {\n        return <p>loading...</p>\n    }\n    const capitalize = (s) => {\n        if (typeof s !== 'string') return '';\n        return s.charAt(0).toUpperCase() + s.slice(1);\n      }\n    const shiftType = [\"1\", \"2\"]; \n\n    const updateWorkerInDataResponse = (newWorker) => {\n        return shifts.map(worker => worker.id == newWorker.id ? newWorker : worker)\n    }\n    const updateShiftInWorker = (existingShift, workerObj) => {\n\n        workerObj.shifts = workerObj.shifts.map(shift => {\n            let found = shift.shiftType == existingShift.shiftType\n                && existingShift.date\n                && typeof shift.date == \"string\"\n                && shift.date.substring(0, 10) == existingShift.date.substring(0, 10)\n                ;\n\n            return found ? existingShift : shift\n        })\n\n        return workerObj\n    }\n    const existAnyShift = (workerObj, type, datestr) => {\n        let existingShift = workerObj.shifts.find(shift =>\n            shift.shiftType == type\n            && typeof shift.date == \"string\"\n            && shift.date.substring(0, 10) == datestr);\n        return existingShift;\n    }\n    const existEndShift = (workerObj, type, datestr) => {\n        let existingEndShift = workerObj.shifts.find(shift =>\n            shift.shiftType == type\n            && typeof shift.date == \"string\"\n            && shift.date.substring(0, 10) == datestr);\n        return existingEndShift;\n    }\n    const existStartShift = (workerObj, type, datestr) => {\n        let existingStartShift = workerObj.shifts.find(shift =>\n            shift.shiftType == type\n            && typeof shift.startShift == \"string\"\n            && shift.date.substring(0, 10) == datestr);\n        return existingStartShift;\n    }\n\n    const toggleInput = (e, type, datestr, wid) => {\n        let inputsTarget = e.currentTarget.firstChild;\n    \n        let workerObj = shifts.find(w => { return w.id == wid });\n        let existingShift = existAnyShift(workerObj, type, datestr);\n\n        if (existingShift && existingShift.active == false) {\n\n            existingShift = { shiftType: type, date: datestr, startShift: (datestr + \" \" + inputsTarget.firstChild.value), endShift: (datestr + \" \" + inputsTarget.lastChild.value), active: true };\n\n\n            workerObj = updateShiftInWorker(existingShift, workerObj);\n        }\n        else if (existingShift) {\n\n            existingShift = { shiftType: type, date: datestr, active: false };\n\n            workerObj = updateShiftInWorker(existingShift, workerObj);\n\n        } else {\n            workerObj.shifts.push({\n                date: datestr,\n                shiftType: type,\n                active: false\n            })\n        }\n        let newDataResponse = updateWorkerInDataResponse(workerObj)\n\n        setShifts(newDataResponse);\n\n\n    }\n\n\n    const getStartValue = (e, type, datestr, wid) => {\n\n        if (!e.target.value) { return; }\n\n        let workerObj = shifts.find(w => { return w.id == wid });\n        let existingEndShift = existEndShift(workerObj, type, datestr);\n        let existingStartShift = existStartShift(workerObj, type, datestr);\n        if (existingEndShift) {\n       \n            existingEndShift = { ...existingEndShift, startShift: (datestr + \" \" + e.target.value), active: true }\n          \n            workerObj = updateShiftInWorker(existingEndShift, workerObj);\n\n        } else if (existingStartShift) {\n          \n            existingStartShift = { ...existingStartShift, startShift: (datestr + \" \" + e.target.value) }\n            workerObj = updateShiftInWorker(existingStartShift, workerObj);\n\n        } else {\n \n            workerObj.shifts.push({\n                date: datestr,\n                shiftType: type,\n                startShift: (datestr + \" \" + e.target.value),\n            })\n        }\n        let newDataResponse = updateWorkerInDataResponse(workerObj)\n\n        setShifts(newDataResponse);\n\n\n    }\n\n    const getEndValue = (e, type, datestr, wid) => {\n  \n        if (!e.target.value) {\n            return;\n        }\n\n        let workerObj = shifts.find(w => { return w.id == wid });\n\n        let existingEndShift = existEndShift(workerObj, type, datestr);\n        let existingStartShift = existStartShift(workerObj, type, datestr);\n\n        if (existingStartShift) {\n           \n            existingStartShift = { ...existingStartShift, endShift: (datestr + \" \" + e.target.value), active: true }\n            workerObj = updateShiftInWorker(existingStartShift, workerObj);\n        } else if (existingEndShift) {\n          \n            existingEndShift = { ...existingEndShift, endShift: (datestr + \" \" + e.target.value) }\n            workerObj = updateShiftInWorker(existingEndShift, workerObj);\n\n\n        } else {\n         \n            workerObj.shifts.push({\n               date : datestr,\n                shiftType: type,\n                endShift: (datestr + \" \" + e.target.value)\n            })\n        }\n        let newDataResponse = updateWorkerInDataResponse(workerObj)\n     \n        setShifts(newDataResponse);\n\n\n    }\n\n\n    return (\n        <>\n            {shiftType.map((type) => {\n                let cabecera = \"\";\n                let wid = worker.id;\n\n                if (type == \"1\") { \n                    cabecera = <th className=\"table-dark align-middle\" rowspan=\"2\" id={worker.id} >{capitalize(worker.worker)}</th>;\n                }\n                return (\n                    <tr>\n\n                        { cabecera}\n                        {week.map((day, index) => {\n                            let datestr = day.toISOString().slice(0, 10);\n\n\n                            let conditionShift = worker.shifts.find(shift => shift.shiftType == type \n                                && shift.id\n                                && new Date ((new Date(shift.date.date).getTime()) + 120*60*1000+1).toISOString().slice(0, 10) == datestr);\n                            let conditionActive = worker.shifts.find(shift => shift.shiftType == type \n                                && typeof shift.date == \"string\" \n                                && shift.date.substring(0, 10) == datestr);\n\n                            \n                            if (conditionShift) {\n                                \n                                if (conditionShift.active === true) {\n                                    return (<>\n\n                                        <td data-shiftid={conditionShift.id} className={type == \"1\" ? \"td-morning\" : type == \"2\" ? \"td-evening\" : \"\"}>\n                                          \n                                            {(\"0\" + (new Date(conditionShift.startShift.date).getHours())).slice(-2)}:{(\"0\" + (new Date(conditionShift.startShift.date).getMinutes())).slice(-2)} /\n                                            {(\"0\" + (new Date(conditionShift.endShift.date).getHours())).slice(-2)}:{(\"0\" + (new Date(conditionShift.endShift.date).getMinutes())).slice(-2)}\n                                          \n                                        </td>\n                                    </>) \n                                }\n                                if (conditionShift.active === false) {\n                                    return (\n\n                                        <td data-shiftid={conditionShift.id} className=\"td-off\">\n                                            <div className=\"\">\n                                                <b>OFF </b>\n                                            </div>\n                                        </td>\n                                    )\n                                } \n                            }else {\n\n                                    return (<>\n                                        <td className={type == \"1\" ? \"td-morning\" : type == \"2\" ? \"td-evening\" : \"\"} data-shiftType={type} data-date={datestr} data-wid={wid} id={index} onDoubleClick={(e) => { toggleInput(e, type, datestr, wid) }}>\n\n                                       \n\n                                            <div className={conditionActive ? (conditionActive.active === false ? \"hide\" : \"\") : \"\"}>\n                                                <input data-shift=\"startShift\" type=\"time\" required onBlur={(e) => { getStartValue(e, type, datestr, wid) }} />\n                                                <input data-shift=\"endShift\" type=\"time\" required onBlur={(e) => { getEndValue(e, type, datestr, wid) }} />\n                                            </div >\n                                            <div className={conditionActive ? conditionActive.active === false ? \"\" : \"hide\" : \"hide\"}>\n                                                <b>OFF</b>\n                                            </div>\n\n\n                                        </td>\n                                    </>)\n                                }\n\n                            })}\n                    </tr>\n                )\n            }\n\n            )\n            }\n        </>\n    );\n}\n\nexport default Weekshifts;\n","/home/pablo/Documentos/swapp/src/components/Footer.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":28,"column":55,"nodeType":"158","messageId":"159","endLine":28,"endColumn":57},{"ruleId":"156","severity":1,"message":"157","line":36,"column":55,"nodeType":"158","messageId":"159","endLine":36,"endColumn":57},{"ruleId":"160","severity":1,"message":"161","line":13,"column":80,"nodeType":"162","endLine":13,"endColumn":101},{"ruleId":"163","severity":1,"message":"164","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":13},{"ruleId":"163","severity":1,"message":"167","line":1,"column":10,"nodeType":"165","messageId":"166","endLine":1,"endColumn":20},{"ruleId":"160","severity":1,"message":"161","line":60,"column":21,"nodeType":"162","endLine":60,"endColumn":45},{"ruleId":"163","severity":1,"message":"168","line":11,"column":11,"nodeType":"165","messageId":"166","endLine":11,"endColumn":14},{"ruleId":"169","severity":1,"message":"170","line":16,"column":19,"nodeType":"171","messageId":"172","endLine":16,"endColumn":27,"fix":"173"},{"ruleId":"174","severity":1,"message":"175","line":45,"column":23,"nodeType":"176","messageId":"177","endLine":45,"endColumn":25},{"ruleId":"174","severity":1,"message":"175","line":57,"column":23,"nodeType":"176","messageId":"177","endLine":57,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":71,"column":31,"nodeType":"158","messageId":"159","endLine":71,"endColumn":33},{"ruleId":"178","severity":1,"message":"179","line":85,"column":8,"nodeType":"180","endLine":85,"endColumn":22,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":92,"column":16,"nodeType":"162","endLine":92,"endColumn":57},{"ruleId":"182","severity":1,"message":"183","line":100,"column":13,"nodeType":"162","endLine":100,"endColumn":54},{"ruleId":"163","severity":1,"message":"184","line":11,"column":11,"nodeType":"165","messageId":"166","endLine":11,"endColumn":20},{"ruleId":"169","severity":1,"message":"170","line":15,"column":19,"nodeType":"171","messageId":"172","endLine":15,"endColumn":27,"fix":"185"},{"ruleId":"178","severity":1,"message":"186","line":66,"column":4,"nodeType":"180","endLine":66,"endColumn":10,"suggestions":"187"},{"ruleId":"174","severity":1,"message":"175","line":78,"column":18,"nodeType":"176","messageId":"177","endLine":78,"endColumn":20},{"ruleId":"174","severity":1,"message":"175","line":90,"column":19,"nodeType":"176","messageId":"177","endLine":90,"endColumn":21},{"ruleId":"182","severity":1,"message":"183","line":160,"column":16,"nodeType":"162","endLine":160,"endColumn":57},{"ruleId":"182","severity":1,"message":"183","line":168,"column":13,"nodeType":"162","endLine":168,"endColumn":54},{"ruleId":"178","severity":1,"message":"188","line":16,"column":6,"nodeType":"180","endLine":16,"endColumn":14,"suggestions":"189"},{"ruleId":"163","severity":1,"message":"190","line":3,"column":9,"nodeType":"165","messageId":"166","endLine":3,"endColumn":17},{"ruleId":"152","replacedBy":"191"},{"ruleId":"154","replacedBy":"192"},{"ruleId":"163","severity":1,"message":"193","line":12,"column":18,"nodeType":"165","messageId":"166","endLine":12,"endColumn":23},{"ruleId":"178","severity":1,"message":"194","line":39,"column":6,"nodeType":"180","endLine":39,"endColumn":8,"suggestions":"195"},{"ruleId":"156","severity":1,"message":"157","line":53,"column":84,"nodeType":"158","messageId":"159","endLine":53,"endColumn":86},{"ruleId":"156","severity":1,"message":"157","line":56,"column":31,"nodeType":"158","messageId":"159","endLine":56,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":66,"column":59,"nodeType":"158","messageId":"159","endLine":66,"endColumn":61},{"ruleId":"182","severity":1,"message":"183","line":76,"column":21,"nodeType":"162","endLine":76,"endColumn":84},{"ruleId":"156","severity":1,"message":"157","line":32,"column":29,"nodeType":"158","messageId":"159","endLine":32,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":95,"column":63,"nodeType":"158","messageId":"159","endLine":95,"endColumn":65},{"ruleId":"156","severity":1,"message":"157","line":95,"column":171,"nodeType":"158","messageId":"159","endLine":95,"endColumn":173},{"ruleId":"163","severity":1,"message":"190","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"163","severity":1,"message":"167","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":37},{"ruleId":"156","severity":1,"message":"157","line":13,"column":47,"nodeType":"158","messageId":"159","endLine":13,"endColumn":49},{"ruleId":"156","severity":1,"message":"157","line":18,"column":41,"nodeType":"158","messageId":"159","endLine":18,"endColumn":43},{"ruleId":"156","severity":1,"message":"157","line":21,"column":48,"nodeType":"158","messageId":"159","endLine":21,"endColumn":50},{"ruleId":"156","severity":1,"message":"157","line":31,"column":29,"nodeType":"158","messageId":"159","endLine":31,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":33,"column":44,"nodeType":"158","messageId":"159","endLine":33,"endColumn":46},{"ruleId":"156","severity":1,"message":"157","line":38,"column":29,"nodeType":"158","messageId":"159","endLine":38,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":40,"column":44,"nodeType":"158","messageId":"159","endLine":40,"endColumn":46},{"ruleId":"156","severity":1,"message":"157","line":45,"column":29,"nodeType":"158","messageId":"159","endLine":45,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":47,"column":44,"nodeType":"158","messageId":"159","endLine":47,"endColumn":46},{"ruleId":"156","severity":1,"message":"157","line":54,"column":56,"nodeType":"158","messageId":"159","endLine":54,"endColumn":58},{"ruleId":"156","severity":1,"message":"157","line":57,"column":51,"nodeType":"158","messageId":"159","endLine":57,"endColumn":53},{"ruleId":"156","severity":1,"message":"157","line":89,"column":56,"nodeType":"158","messageId":"159","endLine":89,"endColumn":58},{"ruleId":"156","severity":1,"message":"157","line":124,"column":56,"nodeType":"158","messageId":"159","endLine":124,"endColumn":58},{"ruleId":"156","severity":1,"message":"157","line":161,"column":26,"nodeType":"158","messageId":"159","endLine":161,"endColumn":28},{"ruleId":"174","severity":1,"message":"196","line":168,"column":48,"nodeType":"176","messageId":"197","endLine":168,"endColumn":50},{"ruleId":"156","severity":1,"message":"157","line":172,"column":94,"nodeType":"158","messageId":"159","endLine":172,"endColumn":96},{"ruleId":"156","severity":1,"message":"157","line":174,"column":128,"nodeType":"158","messageId":"159","endLine":174,"endColumn":130},{"ruleId":"156","severity":1,"message":"157","line":175,"column":95,"nodeType":"158","messageId":"159","endLine":175,"endColumn":97},{"ruleId":"156","severity":1,"message":"157","line":177,"column":64,"nodeType":"158","messageId":"159","endLine":177,"endColumn":66},{"ruleId":"156","severity":1,"message":"157","line":185,"column":94,"nodeType":"158","messageId":"159","endLine":185,"endColumn":96},{"ruleId":"156","severity":1,"message":"157","line":185,"column":123,"nodeType":"158","messageId":"159","endLine":185,"endColumn":125},{"ruleId":"156","severity":1,"message":"157","line":206,"column":61,"nodeType":"158","messageId":"159","endLine":206,"endColumn":63},{"ruleId":"156","severity":1,"message":"157","line":206,"column":90,"nodeType":"158","messageId":"159","endLine":206,"endColumn":92},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'mes' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"200","text":"201"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rotaFetch'. Either include it or remove the dependency array.","ArrayExpression",["202"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'shfitType' is assigned a value but never used.",{"range":"203","text":"201"},"React Hook useEffect has a missing dependency: 'getDataWeek'. Either include it or remove the dependency array.",["204"],"React Hook useEffect has missing dependencies: 'data' and 'setFilteredData'. Either include them or remove the dependency array. If 'setFilteredData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["205"],"'useState' is defined but never used.",["198"],["199"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'poolFetch'. Either include it or remove the dependency array.",["206"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation",[933,933],"()",{"desc":"207","fix":"208"},[932,932],{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},"Update the dependencies array to be: [week, check, rotaFetch]",{"range":"215","text":"216"},"Update the dependencies array to be: [getDataWeek, week]",{"range":"217","text":"218"},"Update the dependencies array to be: [data, search, setFilteredData]",{"range":"219","text":"220"},"Update the dependencies array to be: [poolFetch]",{"range":"221","text":"222"},[2763,2777],"[week, check, rotaFetch]",[2169,2175],"[getDataWeek, week]",[387,395],"[data, search, setFilteredData]",[1118,1120],"[poolFetch]"]